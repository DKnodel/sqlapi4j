<?xml version="1.0" encoding="UTF-8"?>

<project name="sqlapi" default="compile">
    <property file="build.properties" />

    <path id="compile.classpath">
        <fileset dir="${java-build.lib-dir}" />
        <fileset dir="${java-runtime.lib-dir}" />
    </path>

    <path id="runtime.classpath">
        <fileset dir="${java-runtime.lib-dir}" />
    </path>

    <path id="test.srcpath">
        <fileset dir="${java-build.src-dir}" />
        <fileset dir="${java-test.src-dir}" />
    </path>

    <path id="test.classpath">
        <fileset dir="${java-build.lib-dir}" />
        <fileset dir="${java-runtime.lib-dir}" />
        <fileset dir="${java-test.lib-dir}" />
        <fileset file="${java-target.jar}"/>
    </path>
	
    <path id="test.jar.classpath">
		<pathelement location="${target-dir}/${pkgbase}-test.jar"/>
    </path>
	
	<taskdef resource="testngtasks" classpath="lib/testng-5.10-jdk15.jar"/>

    <!-- Targets -->
    <target name="prepare" description="Legt fuer den Build benoetigten Verzeichnisse an">
        <fail message="Dieses Projekt setzt als Datei-Encoding UTF-8 voraus, aber das gesetzte encoding ist '${file.encoding}'">
            <condition>
                <not>
                    <matches string="${file.encoding}" pattern="^UTF-8$"/>
                </not>
            </condition>
        </fail>
        <!--exec executable="etc/build-support/scripts/compare-versions.sh" outputproperty="versions.compared">
            <arg line="${java.version} ${java.minimum.version}" />
        </exec-->
        <fail message="Dieses Projekt setzt Java in einer Version von mindestens ${java.minimum.version} voraus, gefunden: ${java.version}">
            <condition>
                <equals arg1="${versions.compared}" arg2="-1"/>
            </condition>
        </fail>
        <mkdir dir="${java-build.classes-dir}" />
        <mkdir dir="${java-test.classes-dir}" />
    </target>

    <target name="clean" description="Entfernt alle durch den Build generierten Dateien">
        <!-- das target dir existiert nicht zwingend. Damit das
           - delete statement keinen Fehler wirft, wird das verzeichnis
           - (falls es nicht bereits existiert) angelegt.
           -->
        <mkdir dir="${target-dir}" />
        <delete includeemptydirs="true">
            <fileset dir="${target-dir}" includes="**/*"/>
        </delete>
        <!--delete dir="${target-dir}" /-->
    </target>

    <target name="compile" depends="prepare" description="Compiliert die Java-Sourcen">
        <depend srcdir="${java-build.src-dir}" destdir="${java-build.classes-dir}" closure="no" cache="${target-dir}/depcache">
            <include name="**/*.java" />
        </depend>

        <javac destdir="${java-build.classes-dir}" source="1.6" target="1.6" encoding="UTF-8" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
            <compilerarg value="-Xlint:all,-serial,-path,-deprecation" />
            <classpath refid="compile.classpath" />
            <src path="${java-build.src-dir}" />
        </javac>
    </target>

    <target name="jar" depends="compile" description="make jar">
        <jar jarfile="${java-target.jar}">
            <manifest>
                <!--<attribute name="" value=""/>-->
                <attribute name="Implementation-Version" value="$Rev: 17908 $"/>
            </manifest>
            <fileset dir="${java-build.classes-dir}">
                <include name="**/*.class"/>
            </fileset>
        </jar>
    </target>
	
	<target name="test" depends="jar">
        <mkdir dir="${java-test.result-dir}" />
        <javac destdir="${java-test.classes-dir}" source="1.6" target="1.6" encoding="UTF-8" debug="true" debuglevel="lines,vars,source" includeantruntime="false">
	        <compilerarg value="-Xlint:all,-serial,-path,-deprecation" />
	        <classpath refid="test.classpath" />
	        <src path="${java-test.src-dir}" />
	    </javac>
        <jar jarfile="${java-test.jar}">
            <manifest>
                <!--<attribute name="" value=""/>-->
                <attribute name="Test-Version" value="$Rev: 17908 $"/>
            </manifest>
            <fileset dir="${java-test.classes-dir}">
                <include name="**/*.class"/>
            </fileset>
        </jar>
		<testng testJar="${java-test.jar}" classpathref="test.classpath" outputdir="${java-test.result-dir}" haltonfailure="true">
		</testng>			
	</target>

    <target name="eclipse" description="Erstellt eine .classpath Datei fÃ¼r Eclipse." depends="prepare">
        <eclipse mode="java" updatealways="true">
            <classpath>
                <source path="${java-build.src-dir}" />
                <source path="${java-build.generated-src-dir}" />
                <source path="${java-build.resources-dir}" excluding="core/" />
                <source path="${java-build.resources-dir}/core" />
                <source path="${java-test.src-dir}" />
                <source path="${java-test.resources-dir}" />
                <library pathref="compile.classpath" />
                <library pathref="test.classpath" />
                <output path=".eclipse-bin" />
            </classpath>
        </eclipse>
        <exec executable="etc/build-support/scripts/attach_source_jars.sh" failonerror="true" />
        <exec executable="etc/build-support/scripts/merge_codestyle_settings.sh" failonerror="true" />
        <exec executable="etc/build-support/scripts/create_dot_project.sh" failonerror="true" />
    </target>

</project>

